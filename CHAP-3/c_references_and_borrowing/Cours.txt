# Reference and borrowing
## Reference
- A reference is like a pointer in that it’s an address we can follow to access the data stored at that address.
- That data is owned by some variable.
- Unlike a pointer, a reference is guaranteed to point to a valid value of a particular type for the life of that reference.
- Refere to a value but does not own it.
- When a block of reference scoop is finished, the reference is not dropped because it is not the owner of the value.

### Creating reference
- Command : calculate(&s1);

### Good to know
- We call the action of Creating a reference borrowing.
- We can not modify a reference.

### What we can modify a reference ?
- Command : &mut String;
- Restriction :
    . We can only have one mutable reference for a value.
    . We can not do some reference if it's already a mutable reference.
- The benefit of having this restriction is that Rust can prevent data races at compile time.
- Solution :
    . Use a new scoop to avoid a data race when we need to do multiple mutable reference.

### What is a data race :
- Two or more pointers access the same data at the same time.
- At least one of the pointers is being used to write to the data.
- There’s no mechanism being used to synchronize access to the data.

### A eviter :
- Use a reference and a mutable reference at the same time.

### Dangling a reference :
- A pointer that references a location in memory that may have been given to someone else, 
by freeing some memory while preserving a pointer to that memory.
- In Rust, by contrast, the compiler guarantees that references will never be dangling references.
- if you have a reference to some data, the compiler will ensure that the data will not go out 
of scope before the reference to the data does.